#include "../include/day3.h"
int changeState(const char** currentPointer);
int changeState(const char** currentPointer)
{
    int enable = 1;
    const char* searchDo = "do()";
    const char* searchDont = "don't()";
    if (strncmp(*currentPointer, searchDo, strlen(searchDo)) == 0) {
        *currentPointer += strlen(searchDo);
        enable = 1;
    } else if (strncmp(*currentPointer, searchDont, strlen(searchDont)) == 0) {
        *currentPointer += strlen(searchDont);
        enable = 0;
    }
    return enable;
}

int checkMul(const char** currentPointer)
{
    const char* search = "mul(";
    if (strncmp(*currentPointer, search, strlen(search)) == 0) {
        *currentPointer += strlen(search);
        return 1;
    } else {
        return 0;
    } 
}

int study_numbers(char* buffer, int line_count)
{
    const char* currentPointer = buffer;
    const char* search = "mul(";
    const char* searchDo = "do()";
    const char* searchDont = "don't()";
    int firstNumber = 0, secondNumber = 0, solution = 0;
    int i = 0, counter = 0, found = 0;
    int enable = 1;
    int beforeState = 0;
    while (*currentPointer) {
        beforeState = enable;
        if ((enable = changeState(&currentPointer)) == beforeState && checkMul(&currentPointer)) {
            if (enable) {
                firstNumber = getNumber(&currentPointer, &i, &counter);
                if (counter < 4 && *currentPointer == ',') {
                    currentPointer++;
                    secondNumber = getNumber(&currentPointer, &i, &counter);
                }
                if (counter < 4 && *currentPointer == ')') {
                    solution = solution + (firstNumber*secondNumber);
                    currentPointer++;
                }
            } else {

             while (*currentPointer && *currentPointer != ')') {
                    currentPointer++;
                }
                if (*currentPointer == ')') {
                    currentPointer++;
                }
            }
        } else {
            currentPointer++;
        }
        
    }
       
    
    return solution;
}

int checkEnable(const char** currentPointer, int* i)
{
    const char* do_value = "do()";
    const char* dont_value = "don't()";
    if ((*currentPointer = strstr(*currentPointer, do_value)) != NULL) {
        return 1;
    } else if ((*currentPointer = strstr(*currentPointer, dont_value)) != NULL) {
        return 0;
    }
    return 1;
}

int getNumber (const char** currentPointer, int* i, int* counter)
{
    *counter = 0;
    *i = 0;
    int number = 0;
    while (isdigit((*currentPointer)[(*i)])) {
        number = number * 10 + (*currentPointer)[(*i)] - '0';
        (*counter)++;
        (*i)++;
    }
    *currentPointer += *i;
    return number;
}
